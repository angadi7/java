[10:41] Maria (Unverified)
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>FormValidation</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
  <link rel="stylesheet" href="https://unpkg.com/bootstrap@4.6.0/dist/css/bootstrap.min.css" />
</head>
<body>
  <app-root></app-root>
</body>
</html>
[10:42] Maria (Unverified)


app.component.html
[10:42] Maria (Unverified)
 
<main class="main">
  <div class="content">
    <div class="left-side">  
      <h4>Angular 17 Template Driven Form Validation example</h4>
      <hr>
     
      <div class="register-form">
        <form
          name="form"
          #f="ngForm"
          (ngSubmit)="f.form.valid && onSubmit()"
          novalidate      
         >
       
          <div class="form-group">
            <label>Full Name</label>
            <input
              type="text"
              class="form-control"
              name="fullname"
              [(ngModel)]="form.fullname"
              required
              #fullname="ngModel"
              [ngClass]="{ 'is-invalid': f.submitted && fullname.errors }"
            />
            @if (f.submitted && fullname.errors) {
              <div class="invalid-feedback">
                @if (fullname.errors['required']) {
                <div>Please enter the full name</div>
                }
              </div>
            }
          </div>
     
          <div class="form-group">
            <label>Username</label>
            <input
              type="text"
              class="form-control"
              name="username"
              [(ngModel)]="form.username"
              required
              minlength="6"
              maxlength="20"
              #username="ngModel"
              [ngClass]="{ 'is-invalid': f.submitted && username.errors }"
            />
            @if (f.submitted && username.errors ){
              <div class="invalid-feedback">
                @if (username.errors['required']) {
                <div>Username is required</div>
                }
                @if (username.errors['minlength']) {
                <div>Username must be at least 6 characters</div>
                }
                @if (username.errors['maxlength']) {
                <div>Username must be at most 20 characters</div>
                }
              </div>
            }
          </div>
     
          <div class="form-group">
            <label>Email</label>
            <input
              type="email"
              class="form-control"
              name="email"
              [(ngModel)]="form.email"
              required
              email
              #email="ngModel"
              [ngClass]="{ 'is-invalid': f.submitted && email.errors }"
            />
            @if (f.submitted && email.errors) {
              <div class="invalid-feedback">
                @if (email.errors['required']) {
                <div>Email is required</div>
                }
                @if (email.errors['email']) {
                <div>Email is invalid</div>
                }
              </div>
            }
          </div>
     
          <div class="form-group">
            <label>Password</label>
            <input
              type="password"
              class="form-control"
              name="password"
              [(ngModel)]="form.password"
              required
              minlength="6"
              maxlength="40"
              #password="ngModel"
              [ngClass]="{ 'is-invalid': f.submitted && password.errors }"
            />
            @if (f.submitted && password.errors) {
              <div class="invalid-feedback">
                  @if (password.errors['required']) {
                  <div>Password is required</div>
                  }
                  @if (password.errors['minlength']) {
                  <div>Password must be at least 6 characters</div>
                  }
                  @if (password.errors['maxlength']) {
                  <div>Username must not exceed 40 characters</div>
                  }
              </div>
            }
          </div>
     
          <div class="form-group form-check">
            <input
              type="checkbox"
              lass="form-control"
              name="acceptTerms"
              [(ngModel)]="form.acceptTerms"
              class="form-check-input"
              required
              #acceptTerms="ngModel"
              [ngClass]="{ 'is-invalid': f.submitted && acceptTerms.errors }"
            />
            <label for="acceptTerms" class="form-check-label">
              I have read and agree to the Terms
            </label>
              @if (f.submitted && acceptTerms.errors) {
              <div class="invalid-feedback">Accept Terms is required</div>
              }
          </div>
          <hr>
          <div class="form-group">
            <button type="submit" class="btn btn-primary">Register</button>
            <button
              type="button"
              (click)="onReset(f)"
              class="btn btn-warning float-right"
            >
              Reset
            </button>
          </div>
        </form>
      </div>
     
    </div>
  </div>
</main>
 
 
<router-outlet />
[10:42] Maria (Unverified)

---------------------------------------------------

app.component.css

[10:42] Maria (Unverified)
:host {
    --bright-blue: oklch(51.01% 0.274 263.83);
    --electric-violet: oklch(53.18% 0.28 296.97);
    --french-violet: oklch(47.66% 0.246 305.88);
    --vivid-pink: oklch(69.02% 0.277 332.77);
    --hot-red: oklch(61.42% 0.238 15.34);
    --orange-red: oklch(63.32% 0.24 31.68);
 
    --gray-900: oklch(19.37% 0.006 300.98);
    --gray-700: oklch(36.98% 0.014 302.71);
    --gray-400: oklch(70.9% 0.015 304.04);
 
    --red-to-pink-to-purple-vertical-gradient: linear-gradient(
      180deg,
      var(--orange-red) 0%,
      var(--vivid-pink) 50%,
      var(--electric-violet) 100%
    );
 
    --red-to-pink-to-purple-horizontal-gradient: linear-gradient(
      90deg,
      var(--orange-red) 0%,
      var(--vivid-pink) 50%,
      var(--electric-violet) 100%
    );
 
    --pill-accent: var(--bright-blue);
 
    font-family: "Inter", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
      Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji",
      "Segoe UI Symbol";
    box-sizing: border-box;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
 
  h1 {
    font-size: 3.125rem;
    color: var(--gray-900);
    font-weight: 500;
    line-height: 100%;
    letter-spacing: -0.125rem;
    margin: 0;
    font-family: "Inter Tight", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
      Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji",
      "Segoe UI Symbol";
  }
 
  p {
    margin: 0;
    color: var(--gray-700);
  }
 
  main {
    width: 100%;
    min-height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 1rem;
    box-sizing: inherit;
    position: relative;
  }
 
  .angular-logo {
    max-width: 9.2rem;
  }
 
  .content {
    display: flex;
    justify-content: space-around;
    width: 100%;
    max-width: 700px;
    margin-bottom: 3rem;
  }
 
  .content h1 {
    margin-top: 1.75rem;
  }
 
  .content p {
    margin-top: 1.5rem;
  }
 
  .divider {
    width: 1px;
    background: var(--red-to-pink-to-purple-vertical-gradient);
    margin-inline: 0.5rem;
  }
 
  .pill-group {
    display: flex;
    flex-direction: column;
    align-items: start;
    flex-wrap: wrap;
    gap: 1.25rem;
  }
 
  .pill {
    display: flex;
    align-items: center;
    --pill-accent: var(--bright-blue);
    background: color-mix(in srgb, var(--pill-accent) 5%, transparent);
    color: var(--pill-accent);
    padding-inline: 0.75rem;
    padding-block: 0.375rem;
    border-radius: 2.75rem;
    border: 0;
    transition: background 0.3s ease;
    font-family: var(--inter-font);
    font-size: 0.875rem;
    font-style: normal;
    font-weight: 500;
    line-height: 1.4rem;
    letter-spacing: -0.00875rem;
    text-decoration: none;
  }
 
  .pill:hover {
    background: color-mix(in srgb, var(--pill-accent) 15%, transparent);
  }
 
  .pill-group .pill:nth-child(6n + 1) {
    --pill-accent: var(--bright-blue);
  }
  .pill-group .pill:nth-child(6n + 2) {
    --pill-accent: var(--french-violet);
  }
  .pill-group .pill:nth-child(6n + 3),
  .pill-group .pill:nth-child(6n + 4),
  .pill-group .pill:nth-child(6n + 5) {
    --pill-accent: var(--hot-red);
  }
 
  .pill-group svg {
    margin-inline-start: 0.25rem;
  }
 
  .social-links {
    display: flex;
    align-items: center;
    gap: 0.73rem;
    margin-top: 1.5rem;
  }
 
  .social-links path {
    transition: fill 0.3s ease;
    fill: var(--gray-400);
  }
 
  .social-links a:hover svg path {
    fill: var(--gray-900);
  }
 
  @media screen and (max-width: 650px) {
    .content {
      flex-direction: column;
      width: max-content;
    }
 
    .divider {
      height: 1px;
      width: 100%;
      background: var(--red-to-pink-to-purple-horizontal-gradient);
      margin-block: 1.5rem;
    }
  }
 
  p {
    font-family: Lato;
  }
 
  #root {
    padding: 30px;
  }
 
  .register-form {
    max-width: 350px;
    margin: auto;
  }
 
[10:42] Maria (Unverified)

------------------------------------------------------

app.component.ts

[10:42] Maria (Unverified)
import { CommonModule } from '@angular/common';
import { Component } from '@angular/core';
import { NgForm, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterOutlet } from '@angular/router';
 
@Component({
  selector: 'app-root',
  standalone: true,
  imports: [RouterOutlet,FormsModule,ReactiveFormsModule,CommonModule],
  templateUrl: './app.component.html',
  styleUrl: './app.component.css'
})
export class AppComponent {
    title = 'Form Validation';
 
    form = {
      fullname: '',
      username: '',
      email: '',
      password: '',
      acceptTerms: false,
    };
 
    onSubmit(): void {
      console.log(JSON.stringify(this.form));
    }
 
    onReset(form: NgForm): void {
        form.resetForm();
    }
 
}
